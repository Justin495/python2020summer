Exercise 1-Week 2

import math

print ('Hello WOrld') 
#%% Question 1
print('Total Seoconds is ' , 42 * 60 + 42)

#%% Question 2
print('Total Miles are ', 10 / 1.61)

#%% Question 3
print('Average pace per mile in minutes is ' , 6.211 / 42.7)
print('Average pace per mile in seconds is' , 6.211 / 2562)
print('Average speed in mph is ' , 6.211 / (42.7 / 60) )

#%% Question 4
print('Convert 1 Radian to Degree' , 1 * 180/math.pi )

#%% Question 5
h = 4
r = 6

v = math.pi * r ** 2 * h
print('Volume is', v)

#%% Question 6
R = 6373.0

lat1 = math.radians(69.96985432)
lon1 = math.radians(29.07573987)
lat2 = math.radians(63.1896464)
lon2 = math.radians(17.93575681)

dlon = lon2 - lon1
dlat = lat2 - lat1

a = math.sin(dlat / 2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon / 2)**2
c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))

Distance = R * c

print(Distance)


#%% Question 7
print('  ----   ')
print(' /    \\')
print(' /     \\')
print(' | STOP  |')
print(' \\     /   ')
print('  \\    / ')
print('    ----   ')

Exercise 2- Week 3

# Ex1. Python function that can take a list of words and returns the length of the longest one.
def get_the_longest_word(word_list):
    max_len = 0
    for word in word_list:
         if len(word) > max_len:
            max_len = len(word)
            result = word
            
    return max_len, result
    get_the_longest_word(['Nebraska', 'PFAS', 'polyfluoroalkyl'])
    
    # Ex.2 Python program that counts the number of characters in a string.
def string_count(string1):
    return len(set(list(string1)))

string_count('uuuuiiiiiiieeeedddddlllllpppppaaaaaqqqqqcccccgggggtttttetetezaza')
    
    # Ex.3 Python Program that sors a dictionary by value (ascending and descending).
import operator
dictionary = {1: 4, 3: 5, 4: 6, 2: 2, 0: 9}
print('Normal Dictionary : ',dictionary)
sorted_values = dict(sorted(d.items(), key=operator.itemgetter(1)))
print('Ascending order by value : ',sorted_values)
sorted_values = dict(sorted(d.items(), key=operator.itemgetter(1),reverse=True))
print('Descending order by value : ',sorted_values)

  

#Ex.4 Python program to change a string to a new string where first and last characters have exchanged.
def char_exchange(string2):
    return string2[-1:] + string2[1:-1] + string2[:1]

print(char_exchange('Nebraska Water Center'))

#Ex.5 Python function that takes two lists and returns True if they have at least one common members
def common_member(list1, list2):
    result = False
    for x in list1:
        for y in list2:
            if x == y:
                result = True
                break
            return result
print(common_member([2, 3, 5], [2, 4, 9]))

#Ex.6 Python function that returns the minimum number of coins (.01, .1, .25, 1) that make a given value
def coin_changes(value):
    
    coins = [100, 25, 10, 1]
    value = int(value * 100)
    coins_number = []
    for c in coins:
        n = value // c
        coins_number.append(n)
        value -= n * c
    return coins_number
coin_changes(2.69)



Exercise 3-Week 4

#Exercis 4.1_Write a python program that prints all numbers from 0 to 6 except 3 and 6
for r in range(7):
    if r in [3, 6]: continue
    print(r)
    
#Exercise 4.2_Write a python program to checl the validility of password input by users
#Validation:
#At least 1 letter between [a-z] and 1 letter between [A-Z]
#At least 1 number between [0-9]
#At least 1 character from [$ # @]
#Minimum length 6 characters
#Maximimum length 16 characters

def password_validility(passwrd):
    characeter = False
    number_btw = False
    minimum = False
    maximum = False
    length = False
    for p in set(passwrd):
        if p >= 'a' and p <= 'z': minimum = True
        if p >= 'A' and p <= 'Z': maximum = True
        if p >= '0' and p <= '9': number_btw = True
        if p in '$ # @'.split(): characeter = True
        if (len(passwrd)>=6) and (len(passwrd)<=16): True
            
    return characeter and minimum and maximum and number_btw
            
list(map(password_validility, [ '13Water$13', 'True9876', 'Forty40$']))   

#Exercise 4.3_Write a python program to construct the following patter, using a nested for loop.

for i in range(1,10) :
    star= i if i <= 5 else 10 - i
    dash= i -5 if i > 5 else 0
    
    for r in range(star):
        print('*', end="")
    for r in range(dash):
        print('-', end="")
    print('')
    
  #Exercise 4.4_Finding safest car, safest brand, safest vehcle type, total accidents for each brand and vehicle type

Brand = ['Ford', 'Ford',   'Chevy',   'Chevy',   'Honda', 'Ford',   'Honda', 'Honda', 'Ford', 'Chevy']
Model = ['F150', 'Escape', 'Charger', 'Charger', 'Civic', 'Escape', 'CRV',   'CRV',   'F150', 'Silverado']
Type = ['Pickup', 'SUV', 'Sedan', 'Sedan', 'Sedan', 'SUV', 'SUV',   'SUV',   'Pickup', 'Pickup']
Accidents = [25, 79, 46, 90, 29, 88, 79, 93, 20, 11]


brand_model_safest = Accidents.index(min(Accidents))
print('The safest brand and model is a ', Brand[brand_model_safest], Model[brand_model_safest])


brand_safes_vehicle = {t:{} for t in set(Type)}

for b, t, n in zip(Brand, Type, Accidents):
    if b in brand_safes_vehicle[t]:
        brand_safes_vehicle[t][b] += n
    else:
        brand_safes_vehicle[t][b] = n

for t in brand_safes_vehicle:
    min_accident = 10000
    for b in brand_safes_vehicle[t]:
        if brand_safes_vehicle[t][b] < min_accident:
            min_accident = brand_safes_vehicle[t][b]
            brand_safest = b
    brand_safes_vehicle[t] = b
    
for t in brand_safes_vehicle:
    print(t + "'s safest brand is " + brand_safes_vehicle[t])

naccident_brand = {b:0 for b in set(Brand)} 
naccident_type =  {t:0 for t in set(Type)} 
for b, t, n in zip(Brand, Type, Accidents):
    naccident_brand[b] += n
    naccident_type[t] += n
print(naccident_brand)
print(naccident_type)


#Exercise 4.5_Temperature question

temperatures = [-5.4, 1.0, -1.3, -4.8, 3.9, 0.1, -4.4, 4.0, -2.2, -3.9, 4.4,
                -2.5, -4.6, 5.1, 2.1, -2.4, 1.9, -3.3, -4.8, 1.0, -0.8, -2.8,
                -0.1, -4.7, -5.6, 2.6, -2.7, -4.6, 3.4, -0.4, -0.9, 3.1, 2.4,
                1.6, 4.2, 3.5, 2.6, 3.1, 2.2, 1.8, 3.3, 1.6, 1.5, 4.7, 4.0,
                3.6, 4.9, 4.8, 5.3, 5.6, 4.1, 3.7, 7.6, 6.9, 5.1, 6.4, 3.8,
                4.0, 8.6, 4.1, 1.4, 8.9, 3.0, 1.6, 8.5, 4.7, 6.6, 8.1, 4.5,
                4.8, 11.3, 4.7, 5.2, 11.5, 6.2, 2.9, 4.3, 2.8, 2.8, 6.3, 2.6,
                -0.0, 7.3, 3.4, 4.7, 9.3, 6.4, 5.4, 7.6, 5.2]

weather = dict(cold=[], slippery=[], comfortable=[], warm=[])
for i, t in enumerate(temperatures):
    if t < -2:
        weather['cold'].append(i)
    elif t < 2:
        weather['slippery'].append(i)
    elif t < 15:
        weather['comfortable'].append(i)
    else:
        weather['warm'].append(i)
 
print(weathers)


temp_avg = {}
for c in weather:
    t_sum = []
    for i in weather[c]:
        t_sum.append(temperatures[i])
    temp_avg[c] = 'na' if t_sum == [] else sum(t_sum)/len(t_sum)
print(temp_avg)

#Exercise 4.6_String_longest_substring_without_repeating_characters
def longest_without_repeating(string): 
    seen = {} 
    max_length = 0
    start = 0   
    for end in range(len(string)): 
        if string[end] in seen: 

        
            start = max(start, seen[string[end]] + 1) 
   
        
        seen[string[end]] = end 
        max_length = max(max_length, end-start + 1) 
    return max_length 
   

string = "Whatisthenotlobgestreeeeepeating"
print("The starter string is", string) 
length = longest_without_repeating(string) 
print("The length of the longest substring without repeating is", length)

#Excersise 4.7

def find_zero(num_list):
    positive = list(filter(lambda x: x > 0, num_list))
    negative = list(filter(lambda x: x < 0, num_list))
    
    
    zero_in = 0 in num_list
    positive.sort(reverse=True)
    negative.sort()
    
    
    triplets = []
   
    if zero_in:
        for v in set(negative):
            if -v in set(positive):
                triplets.append([v, 0, -v])
                
   
    for v1 in set(negative):
        for i, v2 in enumerate(positive):
            if - v1 - v2 in positive[i+1:]:
                if [v1, v2, - v1 - v2] not in triplets:
                    triplets.append([v1, v2, - v1 - v2]) 
            
    for v1 in set(positive):
        for i, v2 in enumerate(negative):
            if - v1 - v2 in negative[i+1:]:
                if [v1, v2, - v1 - v2] not in triplets:
                    triplets.append([v1, v2, - v1 - v2]) 
    
    return triplets    

print(find_zero([-1, 0, 4, 1, 2, -1, -4]))
print(find_zero([6, 9, 1, 0, 8, 4, -2, -5, -9, -3]))
